
public class Tree {
	protected  Node root;
	protected  int length;
	
	public Tree(int value) {
		System.out.println("rootNode");
		this.root = new Node(value);
		System.out.println(this.root.value);
	}
	
	
	public void insert(int value) {
		Node currentNode = this.root;
		this.length++;
 
		if(isDuplicate(value)) {
			while(true) {
				if(value<currentNode.value) {
					if(currentNode.left==null) {
						currentNode.left=new Node(value);
						break;
					}
					currentNode= currentNode.left;
				}else if(value>currentNode.value) {
					if(currentNode.right==null) {
						currentNode.right =new Node(value);
						break;
					}
					currentNode=currentNode.right;
				}
				
				
			}
		}
		
		
	}
	int[] store,storeReverse;
	int counter,counterReverse;
	
	//for inorder method called from main method
	public  void DepthFirstSearchInOrder() {
			counter=0;
			store= new int[this.length+1];
		 traverseInOrder(this.root,store);
		 
		 for(int a=0;a<store.length;a++) {
			 System.out.println(store[a]);
		 }
	
	}
	
	
	//for reversing method called from main method
	public  void DepthFirstSearchInOrderReverse() {
		counterReverse=0;
		storeReverse= new int[this.length+1];
	 traverseInOrderReverse(this.root,storeReverse);
	 
	 for(int a=0;a<storeReverse.length;a++) {
		 System.out.println(storeReverse[a]);
	 }

}
	
	 
	public void   traverseInOrder(Node node,int[] list) {
		
		if(node.left!=null) {
			traverseInOrder(node.left,list);
		}
		store[counter]=node.value;
		counter++;
		if(node.right!=null) {
			traverseInOrder(node.right,list);
		}
		
	}
	
	//for reversing method called from this class
	public void   traverseInOrderReverse(Node node,int[] list) {
		
		
		System.out.println("reverse");
		if(node.right!=null) {
			traverseInOrderReverse(node.right,list);
		}
		storeReverse[counterReverse]=node.value;
		counterReverse++;
		if(node.left!=null) {
			traverseInOrderReverse(node.left,list);
		}
		
	}

	private boolean  isDuplicate(int value) {
		// TODO Auto-generated method stub
		return true;
	}


	@Override
	public String toString() {
		return "Tree [root=" + root + "]";
	}
	
	
	
	
	
}
